#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 pxlColour;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

    vec4 blendmapColour = texture(blendMap, pass_textureCoords);

    float backTextureAmmount = 1 - (blendmapColour.r + blendmapColour.g + blendmapColour.b);
    vec2 tiledCoords = pass_textureCoords * 40.0;
    vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmmount;
    vec4 rTextureColour = texture(rTexture, tiledCoords) * blendmapColour.r;
    vec4 gTextureColour = texture(gTexture, tiledCoords) * blendmapColour.g;
    vec4 bTextureColour = texture(bTexture, tiledCoords) * blendmapColour.b;

    vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 unitNormal = normalize(surfaceNormal);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for(int i = 0; i<4; i++){
         vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1,0.05);
        vec3 lightDirection = -unitVectorToCamera;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse = totalDiffuse + brightness * lightColour[i];
        totalSpecular = totalSpecular + dampedFactor * lightColour[i] * reflectivity;
    }

    totalDiffuse = max(totalDiffuse, 0.05);

    pxlColour = vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular, 1.0);
    pxlColour = mix(vec4(skyColour, 1.0), pxlColour, visibility);
}




